# Default Travis CI config for Altis
os: linux
dist: jammy

# Ensure PHP CLI and Composer are available
language: php
php:
  - '8.1'

# Set NodeJS version to match the build server.
node_js:
  - 12

# Ensure docker-compose is available
services:
  - docker

# Configure local-server to ensure startup will complete in Travis CI
env:
  global:
    - COMPOSE_HTTP_TIMEOUT=360
    - ES_MEM_LIMIT=2g
    - COMPOSER_NO_INTERACTION=1

# Default notification settings
notifications:
  email:
    on_success: never
    on_failure: change

# Cache composer dependencies by default
cache:
  directories:
    - $HOME/.composer/cache

# Ensure correct node version is used for build
before_install:
  # Exit early if no tests are found
  - test -n "$(find $TRAVIS_BUILD_DIR/tests -maxdepth 1 -name '*.suite.yml' 2>/dev/null)" || exit 0
  - nvm install v12
  - nvm use v12
  # Authenticate with docker hub.
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

# We handle installation via composer create-project
install: skip

# Only run for target branch
branches:
  only:
    - master
    - main
    - /v\d+-branch/
    - travis.*

before_script:
  # Figure out the base branch or default to `master`
  - '[[ $TRAVIS_BRANCH =~ (v[0-9]{2}-branch) ]] && BASE_BRANCH="${BASH_REMATCH[1]}" || BASE_BRANCH="dev-master"'
  - export BASE_BRANCH
  # Install Altis, using this PR branch or the calculated value above
  - |
    composer create-project altis/skeleton:dev-$TRAVIS_BRANCH --stability=dev --ignore-platform-req=php+ --ignore-platform-req=ext-* $HOME/test-root || \
    composer create-project altis/skeleton:dev-$BASE_BRANCH --stability=dev --ignore-platform-req=php+ --ignore-platform-req=ext-* $HOME/test-root || \
    exit 1
  # Install Altis test theme package
  - cd $HOME/test-root && composer require altis/test-theme --ignore-platform-req=php+ --ignore-platform-req=ext-*
  # Mark the test theme as the default
  - cd $HOME/test-root && cat <<< $(jq '. * {"extra":{"altis":{"modules":{"cms":{"default-theme":"test-theme"}}}}}' composer.json | jq . -) > composer.json
  # Require the current module and alias the branch to be tested to the target version main branch
  # Tricks composer to allow installing the branch version if a version constraint exists, by increasing the current patch version
  - cd $HOME/test-root && composer require -W "$ALTIS_PACKAGE:dev-${TRAVIS_PULL_REQUEST_BRANCH:-$TRAVIS_BRANCH} as `jq \".packages[] | select (.name==\\\"$ALTIS_PACKAGE\\\") | .version\" composer.lock | sed -e 's/\"//g;/^dev/q;s/\$/9/'`"
  - cd $HOME/test-root && echo "<?php" > ".config/salts.php"
  - cd $HOME/test-root && curl "https://api.wordpress.org/secret-key/1.1/salt/" >>.config/salts.php
  - cd $HOME/test-root && if [ ! -f ".config/load.php" ] ; then echo "<?php" > ".config/load.php" ; fi
  - |-4
    cd $HOME/test-root && printf "if ( ( Altis\get_environment_type() === 'local' ) || ( Altis\get_environment_type() === 'ci' ) ) {\n \
    \tif ( ! defined( 'AUTH_KEY' ) ) {\n \
    \t\trequire_once __DIR__ . '/salts.php';\n \
    \t}\n \
    } " >> .config/load.php

script:
  # Start local server
  - cd $HOME/test-root && composer server start
  # Run Codeception for module tests, if test suites are found.
  - cd $HOME/test-root && composer dev-tools codecept run -p vendor/$ALTIS_PACKAGE/tests
  # Initialise and run documentation lint config
  - cd $HOME/test-root && composer dev-tools bootstrap lintdocs
  - cd $HOME/test-root && composer dev-tools lintdocs -l vendor/$ALTIS_PACKAGE all
